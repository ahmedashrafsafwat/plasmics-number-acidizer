# Setup Terraform Backend for Number Acidizer (PowerShell)
# This script creates the S3 bucket and DynamoDB table for Terraform state management

param(
    [string]$Region = "eu-central-1"
)

# Configuration
$ProjectName = "number-acidizer"
$AwsRegion = $Region

Write-Host "üöÄ Setting up Terraform backend for Number Acidizer" -ForegroundColor Blue
Write-Host "==================================================" -ForegroundColor Blue

# Check if AWS CLI is configured
try {
    $CallerIdentity = aws sts get-caller-identity --output json | ConvertFrom-Json
    $AccountId = $CallerIdentity.Account
    Write-Host "‚úì AWS Account ID: $AccountId" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå AWS CLI is not configured or you don't have access." -ForegroundColor Red
    Write-Host "Please run 'aws configure' first." -ForegroundColor Red
    exit 1
}

# Generate bucket names
$BucketName = "$ProjectName-terraform-state-$AccountId"
$LockTable = "$ProjectName-terraform-locks"

Write-Host "üì¶ Creating S3 bucket: $BucketName" -ForegroundColor Blue

# Check if S3 bucket exists
try {
    aws s3api head-bucket --bucket $BucketName 2>$null
    Write-Host "‚ö†Ô∏è  S3 bucket already exists: $BucketName" -ForegroundColor Yellow
}
catch {
    # Create bucket
    if ($AwsRegion -eq "eu-central-1") {
        aws s3api create-bucket --bucket $BucketName --region $AwsRegion
    }
    else {
        aws s3api create-bucket --bucket $BucketName --region $AwsRegion --create-bucket-configuration "LocationConstraint=$AwsRegion"
    }
    
    # Enable versioning
    aws s3api put-bucket-versioning --bucket $BucketName --versioning-configuration "Status=Enabled"
    
    # Enable encryption
    $EncryptionConfig = @{
        Rules = @(
            @{
                ApplyServerSideEncryptionByDefault = @{
                    SSEAlgorithm = "AES256"
                }
            }
        )
    } | ConvertTo-Json -Depth 3 -Compress
    
    aws s3api put-bucket-encryption --bucket $BucketName --server-side-encryption-configuration $EncryptionConfig
    
    # Block public access
    $PublicAccessBlock = @{
        BlockPublicAcls = $true
        IgnorePublicAcls = $true
        BlockPublicPolicy = $true
        RestrictPublicBuckets = $true
    } | ConvertTo-Json -Compress
    
    aws s3api put-public-access-block --bucket $BucketName --public-access-block-configuration $PublicAccessBlock
    
    Write-Host "‚úì S3 bucket created successfully" -ForegroundColor Green
}

Write-Host "üîí Creating DynamoDB table: $LockTable" -ForegroundColor Blue

# Check if DynamoDB table exists
try {
    aws dynamodb describe-table --table-name $LockTable --region $AwsRegion 2>$null
    Write-Host "‚ö†Ô∏è  DynamoDB table already exists: $LockTable" -ForegroundColor Yellow
}
catch {
    aws dynamodb create-table `
        --table-name $LockTable `
        --attribute-definitions "AttributeName=LockID,AttributeType=S" `
        --key-schema "AttributeName=LockID,KeyType=HASH" `
        --billing-mode "PAY_PER_REQUEST" `
        --region $AwsRegion `
        --tags "Key=Project,Value=NumberAcidizer" "Key=ManagedBy,Value=Script"

    Write-Host "‚è≥ Waiting for DynamoDB table to be active..." -ForegroundColor Yellow
    aws dynamodb wait table-exists --table-name $LockTable --region $AwsRegion
    Write-Host "‚úì DynamoDB table created successfully" -ForegroundColor Green
}

# Create backend configuration file
$BackendConfigFile = "infrastructure/backend.hcl"
Write-Host "üìù Creating backend configuration file: $BackendConfigFile" -ForegroundColor Blue

$BackendConfig = @"
# Terraform backend configuration
# Generated by setup-terraform-backend.ps1

bucket         = "$BucketName"
key            = "number-acidizer/terraform.tfstate"
region         = "$AwsRegion"
dynamodb_table = "$LockTable"
encrypt        = true
"@

$BackendConfig | Out-File -FilePath $BackendConfigFile -Encoding UTF8
Write-Host "‚úì Backend configuration created" -ForegroundColor Green

# Update main.tf with backend configuration
Write-Host "üîß Updating main.tf with backend configuration" -ForegroundColor Blue

$MainTfContent = Get-Content "infrastructure/main.tf" -Raw
$UpdatedContent = $MainTfContent -replace '(?s)backend "s3" \{.*?\}', 'backend "s3" {
    # Configuration loaded from backend.hcl
  }'

$UpdatedContent | Out-File -FilePath "infrastructure/main.tf" -Encoding UTF8
Write-Host "‚úì main.tf updated" -ForegroundColor Green

Write-Host ""
Write-Host "üéâ Terraform backend setup complete!" -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Next steps:" -ForegroundColor Blue
Write-Host "1. Initialize Terraform:"
Write-Host "   cd infrastructure"
Write-Host "   terraform init -backend-config=backend.hcl"
Write-Host ""
Write-Host "2. Deploy infrastructure:"
Write-Host "   terraform plan"
Write-Host "   terraform apply"
Write-Host ""
Write-Host "üìä Resources created:" -ForegroundColor Blue
Write-Host "‚Ä¢ S3 Bucket: $BucketName"
Write-Host "‚Ä¢ DynamoDB Table: $LockTable"
Write-Host "‚Ä¢ Backend Config: $BackendConfigFile"
Write-Host ""
Write-Host "üí° For GitHub Actions, set this secret:" -ForegroundColor Yellow
Write-Host "TF_STATE_BUCKET=$BucketName"