#!/bin/bash

# Setup Terraform Backend for Number Acidizer
# This script creates the S3 bucket and DynamoDB table for Terraform state management

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="number-acidizer"
AWS_REGION="${AWS_REGION:-eu-central-1}"

echo -e "${BLUE}🚀 Setting up Terraform backend for Number Acidizer${NC}"
echo "=================================================="

# Check if AWS CLI is configured
if ! aws sts get-caller-identity &>/dev/null; then
    echo -e "${RED}❌ AWS CLI is not configured or you don't have access.${NC}"
    echo "Please run 'aws configure' first."
    exit 1
fi

# Get AWS Account ID
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
echo -e "${GREEN}✓ AWS Account ID: ${ACCOUNT_ID}${NC}"

# Generate bucket names
BUCKET_NAME="${PROJECT_NAME}-terraform-state-${ACCOUNT_ID}"
LOCK_TABLE="${PROJECT_NAME}-terraform-locks"

echo -e "${BLUE}📦 Creating S3 bucket: ${BUCKET_NAME}${NC}"

# Create S3 bucket for Terraform state
if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
    echo -e "${YELLOW}⚠️  S3 bucket already exists: ${BUCKET_NAME}${NC}"
else
    # Create bucket
    if [ "$AWS_REGION" = "eu-central-1" ]; then
        aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$AWS_REGION"
    else
        aws s3api create-bucket \
            --bucket "$BUCKET_NAME" \
            --region "$AWS_REGION" \
            --create-bucket-configuration LocationConstraint="$AWS_REGION"
    fi
    
    # Enable versioning
    aws s3api put-bucket-versioning \
        --bucket "$BUCKET_NAME" \
        --versioning-configuration Status=Enabled
    
    # Enable encryption
    aws s3api put-bucket-encryption \
        --bucket "$BUCKET_NAME" \
        --server-side-encryption-configuration '{
            "Rules": [{
                "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                }
            }]
        }'
    
    # Block public access
    aws s3api put-public-access-block \
        --bucket "$BUCKET_NAME" \
        --public-access-block-configuration '{
            "BlockPublicAcls": true,
            "IgnorePublicAcls": true,
            "BlockPublicPolicy": true,
            "RestrictPublicBuckets": true
        }'
    
    echo -e "${GREEN}✓ S3 bucket created successfully${NC}"
fi

echo -e "${BLUE}🔒 Creating DynamoDB table: ${LOCK_TABLE}${NC}"

# Create DynamoDB table for state locking
if aws dynamodb describe-table --table-name "$LOCK_TABLE" --region "$AWS_REGION" &>/dev/null; then
    echo -e "${YELLOW}⚠️  DynamoDB table already exists: ${LOCK_TABLE}${NC}"
else
    aws dynamodb create-table \
        --table-name "$LOCK_TABLE" \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST \
        --region "$AWS_REGION" \
        --tags Key=Project,Value=NumberAcidizer Key=ManagedBy,Value=Script

    echo -e "${YELLOW}⏳ Waiting for DynamoDB table to be active...${NC}"
    aws dynamodb wait table-exists --table-name "$LOCK_TABLE" --region "$AWS_REGION"
    echo -e "${GREEN}✓ DynamoDB table created successfully${NC}"
fi

# Create backend configuration file
BACKEND_CONFIG_FILE="infrastructure/backend.hcl"
echo -e "${BLUE}📝 Creating backend configuration file: ${BACKEND_CONFIG_FILE}${NC}"

cat > "$BACKEND_CONFIG_FILE" << EOF
# Terraform backend configuration
# Generated by setup-terraform-backend.sh

bucket         = "${BUCKET_NAME}"
key            = "number-acidizer/terraform.tfstate"
region         = "${AWS_REGION}"
dynamodb_table = "${LOCK_TABLE}"
encrypt        = true
EOF

echo -e "${GREEN}✓ Backend configuration created${NC}"

# Update main.tf with backend configuration
echo -e "${BLUE}🔧 Updating main.tf with backend configuration${NC}"

# Create a temporary file with the updated backend configuration
TEMP_FILE=$(mktemp)
sed '/backend "s3" {/,/}/c\
  backend "s3" {\
    # Configuration loaded from backend.hcl\
  }' infrastructure/main.tf > "$TEMP_FILE"

mv "$TEMP_FILE" infrastructure/main.tf

echo -e "${GREEN}✓ main.tf updated${NC}"

echo ""
echo -e "${GREEN}🎉 Terraform backend setup complete!${NC}"
echo "=================================================="
echo ""
echo -e "${BLUE}📋 Next steps:${NC}"
echo "1. Initialize Terraform:"
echo "   cd infrastructure"
echo "   terraform init -backend-config=backend.hcl"
echo ""
echo "2. Deploy infrastructure:"
echo "   terraform plan"
echo "   terraform apply"
echo ""
echo -e "${BLUE}📊 Resources created:${NC}"
echo "• S3 Bucket: ${BUCKET_NAME}"
echo "• DynamoDB Table: ${LOCK_TABLE}"
echo "• Backend Config: ${BACKEND_CONFIG_FILE}"
echo ""
echo -e "${YELLOW}💡 For GitHub Actions, set this secret:${NC}"
echo "TF_STATE_BUCKET=${BUCKET_NAME}"