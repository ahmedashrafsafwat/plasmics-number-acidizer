name: Deploy Number Acidizer

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: number-acidizer-backend
  TF_VERSION: 1.5.0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: Run Backend Tests
        run: |
          cd backend
          npm test

      - name: Lint Backend
        run: |
          cd backend
          npm run lint

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm test

      - name: Lint Frontend
        run: |
          cd frontend
          npm run lint

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
                         -backend-config="key=number-acidizer/terraform.tfstate" \
                         -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Validate
        run: |
          cd infrastructure
          terraform validate

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -out=tfplan \
            -var="environment=prod" \
            -var="aws_region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: terraform
        run: |
          cd infrastructure
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT
          echo "ws_url=$(terraform output -raw websocket_url)" >> $GITHUB_OUTPUT

      - name: Build Frontend
        env:
          REACT_APP_API_URL: ${{ steps.terraform.outputs.api_url }}
          REACT_APP_WS_URL: ${{ steps.terraform.outputs.ws_url }}
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Deploy Frontend to S3
        run: |
          cd frontend/build
          aws s3 sync . s3://${{ steps.terraform.outputs.s3_bucket }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.terraform.outputs.cloudfront_id }} \
            --paths "/*"

      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name number-acidizer-api-prod \
            --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            
          aws lambda wait function-updated \
            --function-name number-acidizer-api-prod

      - name: Run E2E Tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Health Check
        run: |
          API_URL="${{ steps.terraform.outputs.api_url }}"
          for i in {1..10}; do
            if curl -f "$API_URL/value"; then
              echo "API is healthy"
              exit 0
            fi
            echo "Waiting for API to be ready..."
            sleep 10
          done
          echo "API health check failed"
          exit 1
