name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: number-acidizer-backend
  NODE_VERSION: '18'

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Lint backend
        run: npm run lint:backend

      - name: Lint frontend
        run: npm run lint:frontend

      - name: Build backend
        run: npm run build:backend

      - name: Build frontend
        run: npm run build:frontend

      # - name: Test backend e2e
      #   run:  npm run test:e2e

      # - name: Test backend unit
      #   run: npm run test:backend:unit

      # - name: Test frontend
      #   run: npm run test:frontend

      # in real world scenarios, you would want to run tests here
  deploy: # in real application we would have a separate deploy job and only deploy on merges to the main branch
    name: Deploy to AWS
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Debug AWS Configuration
        run: |
          echo "AWS_REGION: ${{ env.AWS_REGION }}"
          echo "Secrets exist: AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
          echo "Secrets exist: AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
                         -backend-config="key=number-acidizer/terraform.tfstate" \
                         -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Validate
        run: |
          cd infrastructure
          terraform validate

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -out=tfplan \
            -var="environment=prod" \
            -var="aws_region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: terraform
        run: |
          cd infrastructure

          # Get outputs with error handling
          S3_BUCKET=$(terraform output -raw s3_bucket 2>/dev/null | tr -d '\n')
          CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null | tr -d '\n')
          API_URL=$(terraform output -raw api_url 2>/dev/null | tr -d '\n')
          WS_URL=$(terraform output -raw websocket_url 2>/dev/null | tr -d '\n')
          FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null | tr -d '\n')

          # Debug outputs
          echo "S3_BUCKET: $S3_BUCKET"
          echo "CLOUDFRONT_ID: $CLOUDFRONT_ID"
          echo "API_URL: $API_URL"
          echo "WS_URL: $WS_URL"
          echo "FRONTEND_URL: $FRONTEND_URL"

          # Set GitHub outputs
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "ws_url=$WS_URL" >> $GITHUB_OUTPUT
          echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT

      - name: Setup Node.js for Frontend Build
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Clean Previous Build
        run: |
          cd frontend
          rm -rf build dist .vite

      - name: Build Frontend with Production Environment
        env:
          REACT_APP_API_URL: ${{ steps.terraform.outputs.api_url }}
          REACT_APP_WS_URL: ${{ steps.terraform.outputs.ws_url }}
          NODE_ENV: production
        run: |
          cd frontend
          echo "Building frontend with environment variables:"
          echo "REACT_APP_API_URL: $REACT_APP_API_URL"
          echo "REACT_APP_WS_URL: $REACT_APP_WS_URL"
          echo "NODE_ENV: $NODE_ENV"
          npm run build

      - name: Deploy Frontend to S3
        run: |
          cd frontend/build
          aws s3 sync . s3://${{ steps.terraform.outputs.s3_bucket }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.terraform.outputs.cloudfront_id }} \
            --paths "/*"

      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name number-acidizer-api-prod \
            --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            
          aws lambda wait function-updated \
            --function-name number-acidizer-api-prod

      - name: Health Check
        run: |
          API_URL="${{ steps.terraform.outputs.api_url }}"
          for i in {1..10}; do
            if curl -f "$API_URL/value"; then
              echo "API is healthy"
              exit 0
            fi
            echo "Waiting for API to be ready..."
            sleep 10
          done
          echo "API health check failed"
          exit 1

      - name: Notify Deployment # in real life, I would send a notification or log the deployment status to slack or google chat via email to specific teams
        if: success()
        run: |
          echo "ðŸš€ Deployment successful!"
          echo "Frontend: ${{ steps.terraform.outputs.frontend_url }}"
          echo "API: ${{ steps.terraform.outputs.api_url }}"
          echo "WebSocket: ${{ steps.terraform.outputs.ws_url }}"
